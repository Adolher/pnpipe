self.not_to_shrink = ["ses-", ]
self.dataset_overview, self.full_dataset = \
    self._prepare_dataset_overview(os.scandir(self.dataset_path), {}, {})

    def get_dataset_overview(self):
        return self.dataset_overview

    def print_dataset_overview(self, exclude):
        def print_entry(dictionary, c):
            msg = "{}{:<4}x {}"
            for data in dictionary:
                if len(dictionary[data]["content"]) == 0:
                    if not data.endswith(exclude):
                        print(msg.format(c * "  ", dictionary[data]["count"], data))
                else:
                    if not data.endswith(exclude):
                        print(msg.format(c * "  ", dictionary[data]["count"], data))
                    print_entry(dictionary[data]["content"], c+1)
        print_entry(self.dataset_overview, 0)

    def get_full_dataset(self):
        return self.full_dataset

    def print_full_dataset(self):
        pass

    def _prepare_dataset_overview(self, content, overview_dict, full_dict):
        is_dir = 0
        to_shrink = False
        for c in content:
            if c.is_file():
                name, value = utils.prepare_file(c)
                overview_dict.update({name: {}})
                full_dict.update({c.name: value})
            elif c.is_dir():
                overview_dict[c.name] = {}
                full_dict[c.name] = {}
                overview_dict[c.name], full_dict[c.name] = \
                    self._prepare_dataset_overview(os.scandir(c.path), overview_dict[c.name], full_dict[c.name])
                to_shrink = True
                for clause in self.not_to_shrink:
                    if c.name.startswith(clause):
                        to_shrink = False
                is_dir += 1
        if is_dir >= 2 and to_shrink:
            x = utils.shrink(overview_dict)
        else:
            x = overview_dict
        return x, full_dict
        
def merge(dictionary_, list_, merged_dictionary):
    for item in list_:
        for entry in dictionary_:
            if entry.startswith(item):
                if item not in merged_dictionary.keys():
                    merged_dictionary[item] = {"count": 1, "content": {}}
                else:
                    merged_dictionary[item]["count"] += 1
                if len(dictionary_[entry]) > 0:
                    sub_list = []
                    for sub_entry in dictionary_[entry]:
                        sub_list.append(sub_entry)
                    merged_dictionary[item]["content"] = \
                        merge(dictionary_[entry], sub_list, merged_dictionary[item]["content"])

    return merged_dictionary


def shrink(dictionary):
    dir_list1 = list(dictionary.keys())
    dir_list2 = dir_list1.copy()
    shrunk = []
    for dir1 in dir_list1:
        tmp_dir_name = ""
        for dir2 in dir_list2:
            for x in range(2, min(len(dir1), len(dir2)) + 1):
                if dir1[:x] == dir2[:x]:
                    tmp_dir_name = dir1[:x]
        b = False
        for entry in shrunk:
            if tmp_dir_name.startswith(entry):
                b = True
                break
            elif entry.startswith(tmp_dir_name):
                shrunk.pop(shrunk.index(entry))
                shrunk.append(tmp_dir_name)
                b = True
                break
        if tmp_dir_name not in shrunk and not b:
            shrunk.append(tmp_dir_name)

    if len(dictionary) == len(shrunk):
        return dictionary
    else:
        shrunk_dict = {}
        shrunk_dict = merge(dictionary, shrunk, shrunk_dict)
        return shrunk_dict
